package com.zkp.gankio.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zkp.gankio.db.entity.Article;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ARTICLE".
*/
public class ArticleDao extends AbstractDao<Article, String> {

    public static final String TABLENAME = "ARTICLE";

    /**
     * Properties of entity Article.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ArticleId = new Property(0, String.class, "articleId", true, "ARTICLE_ID");
        public final static Property ArticleLink = new Property(1, String.class, "articleLink", false, "ARTICLE_LINK");
        public final static Property ArticleTitle = new Property(2, String.class, "articleTitle", false, "ARTICLE_TITLE");
        public final static Property ArticleAuthor = new Property(3, String.class, "articleAuthor", false, "ARTICLE_AUTHOR");
        public final static Property ArticleTyppe = new Property(4, String.class, "articleTyppe", false, "ARTICLE_TYPPE");
    }


    public ArticleDao(DaoConfig config) {
        super(config);
    }
    
    public ArticleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ARTICLE\" (" + //
                "\"ARTICLE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: articleId
                "\"ARTICLE_LINK\" TEXT," + // 1: articleLink
                "\"ARTICLE_TITLE\" TEXT," + // 2: articleTitle
                "\"ARTICLE_AUTHOR\" TEXT," + // 3: articleAuthor
                "\"ARTICLE_TYPPE\" TEXT);"); // 4: articleTyppe
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ARTICLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Article entity) {
        stmt.clearBindings();
 
        String articleId = entity.getArticleId();
        if (articleId != null) {
            stmt.bindString(1, articleId);
        }
 
        String articleLink = entity.getArticleLink();
        if (articleLink != null) {
            stmt.bindString(2, articleLink);
        }
 
        String articleTitle = entity.getArticleTitle();
        if (articleTitle != null) {
            stmt.bindString(3, articleTitle);
        }
 
        String articleAuthor = entity.getArticleAuthor();
        if (articleAuthor != null) {
            stmt.bindString(4, articleAuthor);
        }
 
        String articleTyppe = entity.getArticleTyppe();
        if (articleTyppe != null) {
            stmt.bindString(5, articleTyppe);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Article entity) {
        stmt.clearBindings();
 
        String articleId = entity.getArticleId();
        if (articleId != null) {
            stmt.bindString(1, articleId);
        }
 
        String articleLink = entity.getArticleLink();
        if (articleLink != null) {
            stmt.bindString(2, articleLink);
        }
 
        String articleTitle = entity.getArticleTitle();
        if (articleTitle != null) {
            stmt.bindString(3, articleTitle);
        }
 
        String articleAuthor = entity.getArticleAuthor();
        if (articleAuthor != null) {
            stmt.bindString(4, articleAuthor);
        }
 
        String articleTyppe = entity.getArticleTyppe();
        if (articleTyppe != null) {
            stmt.bindString(5, articleTyppe);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Article readEntity(Cursor cursor, int offset) {
        Article entity = new Article( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // articleId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // articleLink
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // articleTitle
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // articleAuthor
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // articleTyppe
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Article entity, int offset) {
        entity.setArticleId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setArticleLink(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setArticleTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setArticleAuthor(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setArticleTyppe(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Article entity, long rowId) {
        return entity.getArticleId();
    }
    
    @Override
    public String getKey(Article entity) {
        if(entity != null) {
            return entity.getArticleId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Article entity) {
        return entity.getArticleId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
